import asyncio
import aiohttp
import logging
import os
import json
import time
from dotenv import load_dotenv
from telethon import TelegramClient, events

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()


last_user_request_time = {}


# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger()

# –í–∞—à—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ Telegram API
api_id = int(os.getenv('API_ID'))  # –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ —Ü–µ —Ü—ñ–ª–µ —á–∏—Å–ª–æ
api_hash = os.getenv('API_HASH')
bot_token = os.getenv('BOT_TOKEN')

# API –∫–ª—é—á —ñ –±–∞–∑–∞ URL
API_BASE_URL = 'https://ais-rag.geekscode.dev'
API_KEY = os.getenv('API_KEY')


client = TelegramClient('bot', api_id, api_hash).start(bot_token=bot_token)
# === UID –∫–µ—à ===
UID_CACHE_FILE = "uids.json"

def load_uid_cache():
    if os.path.exists(UID_CACHE_FILE):
        with open(UID_CACHE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_uid_cache():
    with open(UID_CACHE_FILE, "w", encoding="utf-8") as f:
        json.dump(user_chat_uids, f, ensure_ascii=False, indent=2)

user_chat_uids = load_uid_cache()

# === –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ ===
@client.on(events.NewMessage(pattern='/start'))
async def start(event):
    await event.respond("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –∫–∞—Ñ–µ–¥—Ä–∏ –°–®–Ü ü§ñ\n–ù–∞–ø–∏—à–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —ñ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞ –Ω—å–æ–≥–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏!")
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {event.sender_id}")
    raise events.StopPropagation

@client.on(events.NewMessage(pattern='/new'))
async def new(event):
    await event.respond("–°—Ç–≤–æ—Ä—é—é –¥–ª—è —Ç–µ–±–µ –Ω–æ–≤–∏–π —á–∞—Ç...")
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /new –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {event.sender_id}")

    headers = {
        "xAuth": API_KEY
    }
    sender_id = str(event.sender_id)
    logger.info("–°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —á–∞—Ç...")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{API_BASE_URL}/new-chat", headers=headers) as resp:
                if resp.status == 201:
                    data = await resp.json()
                    uid = data["uid"]
                    user_chat_uids[sender_id] = uid
                    save_uid_cache()
                    logger.info(f"–ß–∞—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ, –æ—Ç—Ä–∏–º–∞–Ω–æ uid: {uid}")
                    await event.respond("–ù–æ–≤–∏–π —á–∞—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ ‚úÖ")
                else:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —á–∞—Ç—É: —Å—Ç–∞—Ç—É—Å {resp.status}")
                    await event.respond("–ô–æ–π, —Ö–∞–ª–µ–ø–∞! üò¢ –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —á–∞—Ç.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –Ω–æ–≤–æ–≥–æ —á–∞—Ç—É: {e}")
        await event.respond("–ô–æ–π, —Ö–∞–ª–µ–ø–∞! üò¢ –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫.")

    raise events.StopPropagation



@client.on(events.NewMessage)
async def handle_question(event):
    sender_id = str(event.sender_id)
    message = event.message

    current_time = time.time()
    last_time = last_user_request_time.get(sender_id)

    if last_time and current_time - last_time < 10:
        await event.reply("–í–∏–±–∞—á—Ç–µ, –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∑–∞–ø–∏—Ç –º–æ–∂–ª–∏–≤–∏–π —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥.")
        return

    last_user_request_time[sender_id] = current_time

    if message.media or message.voice or message.audio or message.video or message.document:
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –º–µ–¥—ñ–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {sender_id}")
        await event.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–º.")
        return

    question = message.message
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {sender_id}: {question}")

    headers = {
        "xAuth": API_KEY
    }

    try:
        async with aiohttp.ClientSession() as session:
            uid = user_chat_uids.get(sender_id)
            if not uid:
                logger.info("–°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —á–∞—Ç...")
                async with session.post(f"{API_BASE_URL}/new-chat", headers=headers) as resp:
                    if resp.status == 201:
                        data = await resp.json()
                        uid = data["uid"]
                        user_chat_uids[sender_id] = uid
                        save_uid_cache()
                        logger.info(f"–ß–∞—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ, –æ—Ç—Ä–∏–º–∞–Ω–æ uid: {uid}")
                    else:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —á–∞—Ç—É: {resp.status}")
                        await event.reply("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —á–∞—Ç—É.")
                        return
            else:
                logger.info(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π uid {uid} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {sender_id}")

            # –ü–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –∑–∞–¥–∞—á–∞ –∑–∞—Ç—Ä–∏–º–∫–∏
            notify_task = asyncio.create_task(asyncio.sleep(2))

            # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
            async with session.post(f"{API_BASE_URL}/chat/{uid}", json={"query": question}, headers=headers) as resp:
                if resp.status == 200:
                    response_data = await resp.json()
                    content = response_data.get("content", "–ù–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")
                    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ API: {content}")
                    if not notify_task.done():
                        notify_task.cancel()
                    await event.reply(content)
                else:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É –¥–æ API: {resp.status}")
                    await event.reply("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç—É –¥–æ API.")

            # –Ø–∫—â–æ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ —â–µ –Ω–µ –±—É–ª–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            try:
                await notify_task
                await event.reply("–í–∞—à –∑–∞–ø–∏—Ç –≤—Å–µ —â–µ –≤ –æ–±—Ä–æ–±—Ü—ñ, –∑–∞—á–µ–∫–∞–π—Ç–µ —Ç—Ä–æ—Ö–∏ –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —á–∞—Ç —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É! ü•≤")
            except asyncio.CancelledError:
                pass


    except Exception as e:
        logger.error(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}")
        await event.reply(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.")

# –ó–∞–ø—É—Å–∫
client.run_until_disconnected()

